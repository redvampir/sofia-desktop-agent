// chat_commands.js
// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ –∏–∑ —á–∞—Ç–∞
const memory = require('./memory');
const path = require('path');
const fs = require('fs');
const helpers = require('./helpers');

/**
 * –†–∞–∑–±–∏—Ä–∞–µ—Ç —Å—Ç—Ä–æ–∫—É —Å –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏ —Ñ–æ—Ä–º–∞—Ç–∞ key="value"
 * –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
 *     text (string): —Ç–µ–∫—Å—Ç –∫–æ–º–∞–Ω–¥—ã
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
 *     Object ‚Äî –ø–∞—Ä—ã –∫–ª—é—á-–∑–Ω–∞—á–µ–Ω–∏–µ
 */
function parse_arguments(text) {
  const args = {};
  const regex = /(\w+)=\"([\s\S]*?)\"|(\w+)=([^\s]+)/g;
  let match;
  while ((match = regex.exec(text)) !== null) {
    if (match[1]) {
      args[match[1]] = match[2];
    } else if (match[3]) {
      args[match[3]] = match[4];
    }
  }
  return args;
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
 * –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
 *     message (string): —Ç–µ–∫—Å—Ç –∫–æ–º–∞–Ω–¥—ã
 *     userId (string): –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
 *     boolean ‚Äî –±—ã–ª–∞ –ª–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞
 */
function handle_save_local_file(message, userId = 'user') {
  if (!message.startsWith('/save_local_file')) {
    return false;
  }
  const params = parse_arguments(message);
  const filename = params.name;
  const content = params.content || '';
  if (!filename) {
    console.log('‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–∫–∞–∑–∞–Ω–æ –∏–º—è —Ñ–∞–π–ª–∞');
    return false;
  }
  try {
    if (memory.memory_state.memory_path) {
      const savedPath = memory.writeMemoryFile(filename, content);
      console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: ${savedPath}`);
    } else {
      console.log('‚ùå –û—à–∏–±–∫–∞: –ø—É—Ç—å –ø–∞–º—è—Ç–∏ –Ω–µ –∑–∞–¥–∞–Ω');
      return false;
    }
  } catch (err) {
    console.log('‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞–π–ª');
    throw err;
  }
  return true;
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É —Ä—É—á–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–∞–º—è—Ç–∏
 * –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
 *     message (string): —Ç–µ–∫—Å—Ç –∫–æ–º–∞–Ω–¥—ã
 *     userId (string): –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
 *     boolean ‚Äî –±—ã–ª–∞ –ª–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞
 */
function handle_save_memory(message, userId = 'user') {
  if (!message.startsWith('/save_memory')) {
    return false;
  }
  const params = parse_arguments(message);
  let filename = params.filename;
  if (filename && !helpers.validate_filename(filename)) {
    console.log('‚ùå –û—à–∏–±–∫–∞: –∏–º—è —Ñ–∞–π–ª–∞ –¥–æ–ª–∂–Ω–æ –æ–∫–∞–Ω—á–∏–≤–∞—Ç—å—Å—è –Ω–∞ .md –∏–ª–∏ .txt');
    return false;
  }
  if (!filename) {
    const date = new Date().toISOString().split('T')[0];
    filename = `memory_${date}.md`;
  }
  const content = memory.getCurrentPlan();
  try {
    if (memory.memory_state.memory_path) {
      memory.writeMemoryFile(filename, content);
      console.log(`‚úÖ –ü–∞–º—è—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∫–∞–∫ "${filename}"`);
    } else {
      console.log('‚ùå –û—à–∏–±–∫–∞: –ø—É—Ç—å –ø–∞–º—è—Ç–∏ –Ω–µ –∑–∞–¥–∞–Ω');
      return false;
    }
  } catch (err) {
    console.log('‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–∞–º—è—Ç—å');
    throw err;
  }
  return true;
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É –∑–∞–≥—Ä—É–∑–∫–∏ –ø–∞–º—è—Ç–∏ –∏–∑ —Ñ–∞–π–ª–∞
 * –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
 *     message (string): —Ç–µ–∫—Å—Ç –∫–æ–º–∞–Ω–¥—ã
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
 *     Promise<boolean> ‚Äî –±—ã–ª–∞ –ª–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞
 */
async function handle_load_memory(message) {
  if (!message.startsWith('/load_memory')) {
    return false;
  }
  const params = parse_arguments(message);
  const filename = params.filename;
  if (!filename || !helpers.validate_filename(filename)) {
    console.log('‚ùå –û—à–∏–±–∫–∞: —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞');
    return true;
  }
  try {
    let content = '';
    if (memory.memory_state.memory_path) {
      content = await memory.loadMemoryFile(filename);
    } else {
      console.log('‚ùå –û—à–∏–±–∫–∞: –ø—É—Ç—å –ø–∞–º—è—Ç–∏ –Ω–µ –∑–∞–¥–∞–Ω');
      return true;
    }
    if (content === '') {
      console.log(`‚ùå –§–∞–π–ª ${filename} –ø—É—Å—Ç–æ–π –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.`);
    } else {
      console.log(`‚úÖ –ü–∞–º—è—Ç—å "${filename}" –∑–∞–≥—Ä—É–∂–µ–Ω–∞. –¢–µ–ø–µ—Ä—å –æ–Ω–∞ –∞–∫—Ç–∏–≤–Ω–∞ –≤ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏.`);
    }
  } catch (err) {
    console.log(`‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª ${filename}`);
  }
  return true;
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É –∑–∞–≥—Ä—É–∑–∫–∏ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
 * –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
 *     message (string): —Ç–µ–∫—Å—Ç –∫–æ–º–∞–Ω–¥—ã
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
 *     boolean ‚Äî –±—ã–ª–∞ –ª–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞
 */
async function handle_load_local_file(message) {
  if (!message.startsWith('/load_local_file')) {
    return false;
  }
  const params = parse_arguments(message);
  const filename = params.name;
  if (!filename) {
    console.log('‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–∫–∞–∑–∞–Ω–æ –∏–º—è —Ñ–∞–π–ª–∞');
    return true;
  }
  try {
    const content = await memory.readMemoryFile(filename);
    const prepared = content.replace(/\\n/g, '\n');
    console.log(`üì§ –ó–∞–≥—Ä—É–∂–µ–Ω–æ: ${filename}\n---\n${prepared}`);
  } catch (err) {
    console.log(`‚ùå –§–∞–π–ª ${filename} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.`);
  }
  return true;
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É –ø–µ—Ä–µ—á–Ω—è –ª–æ–∫–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
 * –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
 *     message (string): —Ç–µ–∫—Å—Ç –∫–æ–º–∞–Ω–¥—ã
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
 *     boolean ‚Äî –±—ã–ª–∞ –ª–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞
 */
async function handle_list_local_files(message) {
  if (!message.startsWith('/list_local_files')) {
    return false;
  }
  if (!memory.memory_state.base_path || !memory.memory_state.folder) {
    const full = path.join(memory.memory_state.base_path || '', memory.memory_state.folder || '');
    console.log(`‚ùå –û—à–∏–±–∫–∞: –ü–∞–ø–∫–∞ –ø–∞–º—è—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: ${full}`);
    return true;
  }
  try {
    const files = await memory.listMemoryFiles();
    if (!files.length) {
      console.log('üìÇ –í —É–∫–∞–∑–∞–Ω–Ω–æ–π –ø–∞–ø–∫–µ –Ω–µ—Ç —Ñ–∞–π–ª–æ–≤ –ø–∞–º—è—Ç–∏.');
    } else {
      console.log('üìÇ –§–∞–π–ª—ã –≤ –ø–∞–º—è—Ç–∏:');
      files.forEach((f) => console.log(`- ${f}`));
    }
  } catch (err) {
    console.log(`‚ùå –û—à–∏–±–∫–∞: –ü–∞–ø–∫–∞ –ø–∞–º—è—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: ${memory.memory_state.memory_path}`);
  }
  return true;
}

module.exports = {
  handle_save_local_file,
  handle_save_memory,
  handle_load_memory,
  handle_load_local_file,
  handle_list_local_files
};

// –ú–æ–¥—É–ª—å –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è —Ä–∞–∑–±–æ—Ä–∞ –∫–æ–º–∞–Ω–¥ –∏–∑ —á–∞—Ç–∞ –∏ –∏—Ö –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.
