// console_interface.js
// –û—Å–Ω–æ–≤–Ω–æ–π CLI –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –∞–≥–µ–Ω—Ç–æ–º –°–æ—Ñ–∏–∏
const inquirer = require('inquirer');
const chalk = require('chalk');
const memory = require('./memory');

/**
 * –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–µ–π—Å—Ç–≤–∏–µ –∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–æ–º–∞–Ω–¥—É
 */
async function main_menu() {
  const answer = await inquirer.prompt({
    type: 'list',
    name: 'action',
    message: '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
    choices: [
      { name: 'üìÅ –ó–∞–¥–∞—Ç—å –ø–∞–ø–∫—É –ø–∞–º—è—Ç–∏', value: 'set_memory_path' },
      { name: 'üìÇ –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ –¥—Ä—É–≥—É—é –ø–∞–º—è—Ç—å', value: 'switch_memory_folder' },
      { name: 'üìÑ –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π –ø–ª–∞–Ω/–∫–æ–Ω—Ç–µ–∫—Å—Ç', value: 'show_plan' },
      { name: 'üö™ –í—ã–π—Ç–∏', value: 'exit' }
    ]
  });

  switch (answer.action) {
    case 'set_memory_path':
      await ask_set_memory();
      break;
    case 'switch_memory_folder':
      await ask_switch_memory();
      break;
    case 'show_plan':
      show_plan();
      break;
    case 'exit':
      console.log(chalk.green('–î–æ —Å–≤–∏–¥–∞–Ω–∏—è!'));
      process.exit(0);
  }

  show_status();
  main_menu();
}

/**
 * –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ –ø–∞–º—è—Ç–∏ –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –µ–≥–æ
 */
async function ask_set_memory() {
  const { folder } = await inquirer.prompt({
    type: 'input',
    name: 'folder',
    message: '–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ –ø–∞–º—è—Ç–∏:'
  });
  try {
    memory.setLocalMemoryBasePath(folder);
    console.log(chalk.green('‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ: ' + folder));
  } catch (err) {
    console.log(chalk.red('‚ùå –û—à–∏–±–∫–∞: ' + err.message));
  }
}

/**
 * –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –Ω–æ–≤—ã–π –ø—É—Ç—å –∏ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –ø–∞–º—è—Ç—å
 */
async function ask_switch_memory() {
  const { folder } = await inquirer.prompt({
    type: 'input',
    name: 'folder',
    message: '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞/—á–∞—Ç–∞:'
  });
  try {
    memory.setMemoryFolder(folder);
    console.log(chalk.green('‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ: ' + folder));
  } catch (err) {
    console.log(chalk.red('‚ùå –û—à–∏–±–∫–∞: ' + err.message));
  }
}


/**
 * –í—ã–≤–æ–¥–∏—Ç —Ç–µ–∫—É—â–∏–π –ø–ª–∞–Ω/–∫–æ–Ω—Ç–µ–∫—Å—Ç
 */
function show_plan() {
  console.log(chalk.blue('–¢–µ–∫—É—â–∏–π –ø–ª–∞–Ω:\n' + memory.getCurrentPlan()));
}

/**
 * –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–∞–º—è—Ç–∏
 */
function show_status() {
  console.log(chalk.yellow('–ê–∫—Ç–∏–≤–Ω–∞—è –ø–∞–º—è—Ç—å: –ª–æ–∫–∞–ª—å–Ω–∞—è'));
  console.log(chalk.yellow(`–ü—É—Ç—å: ${memory.memory_state.memory_path || '–Ω–µ –∑–∞–¥–∞–Ω'}`));
}

main_menu();

// CLI –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å –ª–æ–∫–∞–ª—å–Ω–æ–π –∏ —É–¥–∞–ª—ë–Ω–Ω–æ–π –ø–∞–º—è—Ç—å—é.
// –ü—Ä–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–∏ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏.
